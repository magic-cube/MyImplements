正则表达式
 *为什么需要正则表达式
	文本的复杂处理
 *工具软件
	RegexBuddy

正则表达式
 *普通字符
	-字母，数字，下划线，以及没有特殊定义的标点符号，都是“普通字符”。表达式中的
	 普通字符，在匹配一个字符串的时候，匹配与之相同的一个字符
 *简单的转义字符
	\n 代表换行符
	\t 代表制表符
	\\ 代表\本身
 *标准字符集合
	-能够与‘多种字符’匹配的表达式
	-注意区分大小写，大写是相反的意思
	\d 任意一个数字，0-9
	\w 任意一个字母或数字或下划线
	\s 包括空格、制表符、换行符的空白字符中的其中任意一个
	小数点可以匹配任意一个字符，除了换行符
	如果要匹配任意字符包括\n,使用[\s\S]

 （********）
 *自定义字符集合
	-[]	方括号匹配方式，能够匹配方括号中任意一个字符

	[^abc]	匹配a或b或5或@
	[f-k]	匹配f-k之间的任意一个字母
	[^A-F0-3]	匹配A-F，0-3之外的任意一个字符
	
	-正则表达式的特殊符号，被包含到中括号中，则失去特殊意义。除了^,-之外
	-标准字符集，除小数点外，如果被包含于中括号，自定义字符集合将包含该集合
		如：[\d.\-+]将匹配：数字、小数点、+、-

 *量词（贪婪模式与非贪婪模式）
	{n} 表达式重复n次
		例：\d{6} 重复六次\d,匹配六位数字
	{m,n} 表达式重复，最少三次，最多六次
		例：\d{3,6} 最少重复三次，最多重复六次，匹配三四五六位数字
	量词匹配时，默认为贪婪模式，匹配字符数越多越好
	
	非贪婪模式\d{3,6}? 在后面加上问号?
		
	{3,}最少重复三次

	? 代表匹配表达式零次或一次出现
	+ 最少一次
	* 零次或任意次

 *字符边界
	-匹配的不是字符，而是位置，符合某种条件的位置
	^ 与字符串开始的地方匹配
	$ 与字符串结束的地方匹配
	\b 匹配一个单词边界

	- \b匹配这样一个位置：前面的字符和后面的字符不全是\w3
	字符边界的匹配由于匹配的是位置而不是字符，因而又称零宽的匹配
	例^i 匹配以i开头的位置
	
 *正则表达式的匹配模式
	IGNORECASE 忽略大小写模式
	-匹配时忽略大小写
	-默认情况下，正则表达式是要区分大小写的
	
	SINGLELINE 单行模式
	-整个文本看作一个字符串，只有一个开头，一个结尾
	-是小数点“.”可以匹配包括换行符在内的任意字符

	MULTLINE 多行模式
	-每一行都是一个字符串，都有开头和结尾
	





















	

